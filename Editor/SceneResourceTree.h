#pragma once

#include "PropertyWnd.h"

namespace Ogre
{
	class SceneManager;
}

enum KSceneResourceTreeImages
{
	SRTI_SCENE,
	SRTI_SKY,
	SRTI_TERRAIN_SET,
	SRTI_TERRAIN,
	SRTI_LIGHT_SET,
	SRTI_LIGHT,
	SRTI_MODEL_SET,
	SRTI_MODEL,
	SRTI_MESH_SET,
	SRTI_MESH,
	SRTI_LIQUID_SET,
	SRTI_LIQUID,
	SRTI_PARTICLE_SET,
	SRTI_PARTICLE,
	_SRTI
};

enum // 需动态更新的域
{
	SRTI_SCENE_NAME,
	SRTI_SCENE_AMBIENT_LIGHT,
	SRTI_SCENE_SHADOW_TECHNIQUE,
	SRTI_SCENE_FOG_MODE,
	SRTI_SCENE_FOG_COLOR,
	SRTI_SCENE_FOG_DENSITY,
	SRTI_SCENE_FOG_START,
	SRTI_SCENE_FOG_END,
	SRTI_SCENE_SKY_TYPE,
	// Light
	SRTI_LIGHT_TYPE,
	SRTI_LIGHT_DIFFUSE_COLOUR,
	SRTI_LIGHT_SPECULAR_COLOUR,
	SRTI_LIGHT_POSITION_X,
	SRTI_LIGHT_POSITION_Y,
	SRTI_LIGHT_POSITION_Z,
	SRTI_LIGHT_DIRECTION_X,
	SRTI_LIGHT_DIRECTION_Y,
	SRTI_LIGHT_DIRECTION_Z,
	SRTI_LIGHT_ATTENUATION_RANGE,
	SRTI_LIGHT_ATTENUATION_CONSTANT,
	SRTI_LIGHT_ATTENUATION_LINEAR,
	SRTI_LIGHT_ATTENUATION_QUADRATIC,
	SRTI_LIGHT_SPOTLIGHT_RANGE_INNER_ANGLE,
	SRTI_LIGHT_SPOTLIGHT_RANGE_OUTER_ANGLE,
	SRTI_LIGHT_SPOTLIGHT_RANGE_FALLOFF,
	// StaticMesh & DynamicModel
	SRTI_MESH_SHADOW,
	SRTI_MESH_POSITION_X,
	SRTI_MESH_POSITION_Y,
	SRTI_MESH_POSITION_Z,
	SRTI_MESH_SCALE_X,
	SRTI_MESH_SCALE_Y,
	SRTI_MESH_SCALE_Z,
	SRTI_MESH_DIRECTION_X,
	SRTI_MESH_DIRECTION_Y,
	SRTI_MESH_DIRECTION_Z,
	// Liquid
	SRTI_LIQUID_POSITION_X,
	SRTI_LIQUID_POSITION_Y,
	SRTI_LIQUID_POSITION_Z,
};

class SceneResourceTree : public CTreeCtrl, public CPropertyListener
{
	DECLARE_DYNAMIC(SceneResourceTree)

public:
	SceneResourceTree();
	virtual ~SceneResourceTree();

	void ResetImageList();
	void RebuildTree();

	HTREEITEM GetTreeItem(KSceneResourceTreeImages Type) { return mTreeItems[Type]; }
	void FirePropertyChanged();
	void OnPropertyChanged(CBCGPProp *Prop);

	static SceneResourceTree *Current;

	DECLARE_MESSAGE_MAP()
	afx_msg void OnTvnSelchanged(NMHDR *pNMHDR, LRESULT *pResult);
	void AfterSelectTreeItem(HTREEITEM hItem);

	CImageList mImageList;
	HTREEITEM mTreeItems[_SRTI];
};
